
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { CheckCircle, XCircle, RotateCcw, Trophy, Clock } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface MCQQuestion {
  id: string;
  question: string;
  option_a: string;
  option_b: string;
  option_c: string;
  option_d: string;
  correct_answer: string;
  subject: string;
  board?: string;
  year?: number;
  chapter?: string;
}

const MCQSection = () => {
  const [selectedSubject, setSelectedSubject] = useState<string>('all');
  const [selectedClass, setSelectedClass] = useState<string>('all');
  const [selectedDepartment, setSelectedDepartment] = useState<string>('all');
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string>('');
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [answeredQuestions, setAnsweredQuestions] = useState<Set<number>>(new Set());
  const [quizMode, setQuizMode] = useState(false);
  const [timeLeft, setTimeLeft] = useState(0);
  const { toast } = useToast();

  // Department options
  const departments = [
    { value: 'science', label: '‡¶∏‡¶æ‡¶á‡¶®‡ßç‡¶∏' },
    { value: 'arts', label: '‡¶Ü‡¶∞‡ßç‡¶ü‡¶∏' },
    { value: 'commerce', label: '‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∏' },
    { value: 'alim', label: '‡¶Ü‡¶≤‡¶ø‡¶Æ' },
    { value: 'dakhil', label: '‡¶¶‡¶æ‡¶ñ‡¶ø‡¶≤' }
  ];

  // Department-wise subjects
  const departmentSubjects = {
    science: ['‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®', '‡¶ú‡ßÄ‡¶¨‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶ó‡¶£‡¶ø‡¶§', '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', '‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø'],
    arts: ['‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', '‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏', '‡¶≠‡ßÇ‡¶ó‡ßã‡¶≤', '‡¶™‡ßå‡¶∞‡¶®‡ßÄ‡¶§‡¶ø', '‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßÄ‡¶§‡¶ø', '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ', '‡¶π‡¶ø‡¶®‡ßç‡¶¶‡ßÅ ‡¶ß‡¶∞‡ßç‡¶Æ', '‡¶¨‡ßå‡¶¶‡ßç‡¶ß ‡¶ß‡¶∞‡ßç‡¶Æ', '‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶® ‡¶ß‡¶∞‡ßç‡¶Æ'],
    commerce: ['‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Ç‡¶ó‡¶†‡¶® ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ', '‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßÄ‡¶§‡¶ø', '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', '‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø'],
    alim: ['‡¶Ü‡¶∞‡¶¨‡¶ø', '‡¶´‡¶ø‡¶ï‡¶π', '‡¶Ü‡¶ï‡¶æ‡¶á‡¶¶ ‡¶ì ‡¶Æ‡¶æ‡¶®‡¶§‡¶ø‡¶ï', '‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶∂‡¶∞‡ßÄ‡¶´', '‡¶§‡¶æ‡¶´‡¶∏‡ßÄ‡¶∞ ‡¶∂‡¶∞‡ßÄ‡¶´', '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', '‡¶ó‡¶£‡¶ø‡¶§', '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®'],
    dakhil: ['‡¶Ü‡¶∞‡¶¨‡¶ø', '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ', '‡¶Ü‡¶≤ ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶ì ‡¶§‡¶æ‡¶ú‡¶¨‡ßÄ‡¶¶', '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', '‡¶ó‡¶£‡¶ø‡¶§', '‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶ì ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶ú‡¶ø‡¶ï ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®']
  };

  // All available subjects (combined from all departments)
  const allSubjects = [
    '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', '‡¶ó‡¶£‡¶ø‡¶§', '‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®', 
    '‡¶ú‡ßÄ‡¶¨‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏', '‡¶≠‡ßÇ‡¶ó‡ßã‡¶≤', '‡¶™‡ßå‡¶∞‡¶®‡ßÄ‡¶§‡¶ø', '‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßÄ‡¶§‡¶ø', 
    '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ', '‡¶π‡¶ø‡¶®‡ßç‡¶¶‡ßÅ ‡¶ß‡¶∞‡ßç‡¶Æ', '‡¶¨‡ßå‡¶¶‡ßç‡¶ß ‡¶ß‡¶∞‡ßç‡¶Æ', '‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶® ‡¶ß‡¶∞‡ßç‡¶Æ', 
    '‡¶ï‡ßÉ‡¶∑‡¶ø‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ', '‡¶ó‡¶æ‡¶∞‡ßç‡¶π‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø',
    '‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Ç‡¶ó‡¶†‡¶® ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ', '‡¶Ü‡¶∞‡¶¨‡¶ø', '‡¶´‡¶ø‡¶ï‡¶π',
    '‡¶Ü‡¶ï‡¶æ‡¶á‡¶¶ ‡¶ì ‡¶Æ‡¶æ‡¶®‡¶§‡¶ø‡¶ï', '‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶∂‡¶∞‡ßÄ‡¶´', '‡¶§‡¶æ‡¶´‡¶∏‡ßÄ‡¶∞ ‡¶∂‡¶∞‡ßÄ‡¶´', '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®',
    '‡¶Ü‡¶≤ ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶ì ‡¶§‡¶æ‡¶ú‡¶¨‡ßÄ‡¶¶', '‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶ì ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶ú‡¶ø‡¶ï ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®'
  ];

  // Get subjects based on selected department
  const getAvailableSubjects = () => {
    if (selectedDepartment === 'all') {
      return allSubjects;
    }
    return departmentSubjects[selectedDepartment as keyof typeof departmentSubjects] || [];
  };

  // Class levels
  const classLevels = [
    '‡ß¨‡¶∑‡ßç‡¶†', '‡ß≠‡¶Æ', '‡ßÆ‡¶Æ', '‡ßØ‡¶Æ', '‡ßß‡ß¶‡¶Æ', '‡¶è‡¶ï‡¶æ‡¶¶‡¶∂', '‡¶¶‡ßç‡¶¨‡¶æ‡¶¶‡¶∂'
  ];

  // Reset subject when department changes
  useEffect(() => {
    if (selectedDepartment !== 'all') {
      const availableSubjects = getAvailableSubjects();
      if (selectedSubject !== 'all' && !availableSubjects.includes(selectedSubject)) {
        setSelectedSubject('all');
      }
    }
  }, [selectedDepartment]);

  // Fetch MCQ questions
  const { data: mcqQuestions = [], isLoading, refetch } = useQuery({
    queryKey: ['mcq_questions', selectedSubject, selectedClass, selectedDepartment],
    queryFn: async () => {
      let query = supabase.from('mcq_questions').select('*');
      
      if (selectedSubject !== 'all') {
        query = query.eq('subject', selectedSubject);
      } else if (selectedDepartment !== 'all') {
        // Filter by department subjects
        const deptSubjects = getAvailableSubjects();
        query = query.in('subject', deptSubjects);
      }
      
      const { data, error } = await query.order('created_at', { ascending: false });
      
      if (error) throw error;
      return data as MCQQuestion[];
    },
  });

  // Timer for quiz mode
  useEffect(() => {
    if (quizMode && timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (quizMode && timeLeft === 0 && !showResult) {
      handleSubmitAnswer();
    }
  }, [timeLeft, quizMode]);

  const currentQuestion = mcqQuestions[currentQuestionIndex];

  const handleAnswerSelect = (answer: string) => {
    setSelectedAnswer(answer);
  };

  const handleSubmitAnswer = () => {
    if (!selectedAnswer && !showResult) {
      toast({
        title: "‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
        description: "‡¶è‡¶ï‡¶ü‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®‡•§",
        variant: "destructive"
      });
      return;
    }

    setShowResult(true);
    
    if (selectedAnswer === currentQuestion?.correct_answer) {
      setScore(score + 1);
      toast({
        title: "‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞! üéâ",
        description: "‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï‡•§",
      });
    } else {
      toast({
        title: "‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞ üòû",
        description: `‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${getOptionText(currentQuestion?.correct_answer)}`,
        variant: "destructive"
      });
    }

    setAnsweredQuestions(prev => new Set(prev).add(currentQuestionIndex));
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < mcqQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedAnswer('');
      setShowResult(false);
      if (quizMode) {
        setTimeLeft(30);
      }
    } else {
      toast({
        title: "‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∂‡ßá‡¶∑!",
        description: `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞: ${score}/${mcqQuestions.length}`,
      });
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
      setSelectedAnswer('');
      setShowResult(false);
      if (quizMode) {
        setTimeLeft(30);
      }
    }
  };

  const resetQuiz = () => {
    setCurrentQuestionIndex(0);
    setSelectedAnswer('');
    setShowResult(false);
    setScore(0);
    setAnsweredQuestions(new Set());
    setQuizMode(false);
    setTimeLeft(0);
  };

  const startQuizMode = () => {
    setQuizMode(true);
    setTimeLeft(30);
    resetQuiz();
    toast({
      title: "‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Æ‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ!",
      description: "‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶∏‡¶Æ‡¶Ø‡¶º‡•§",
    });
  };

  const getOptionText = (option: string) => {
    if (!currentQuestion) return '';
    switch (option) {
      case 'A': return currentQuestion.option_a;
      case 'B': return currentQuestion.option_b;
      case 'C': return currentQuestion.option_c;
      case 'D': return currentQuestion.option_d;
      default: return '';
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:to-gray-800 p-4 pb-24 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-300 text-lg bangla-text">MCQ ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:to-gray-800 p-4 pb-24">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <Card className="bg-white/90 dark:bg-gray-800/80 backdrop-blur-xl border-white/30 shadow-2xl">
          <CardHeader className="text-center py-6">
            <CardTitle className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-red-600 bg-clip-text text-transparent mb-2 bangla-text">
              üìù MCQ ‡¶™‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶∏
            </CardTitle>
            <p className="text-gray-600 dark:text-gray-300 text-base md:text-lg bangla-text">
              ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ MCQ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
            </p>
          </CardHeader>
        </Card>

        {/* Controls */}
        <Card className="bg-white/90 dark:bg-gray-800/80 backdrop-blur-xl border-white/30 shadow-xl">
          <CardContent className="p-4 md:p-6">
            <div className="flex flex-col gap-4 items-start justify-between">
              <div className="flex flex-col md:flex-row gap-3 md:gap-4 items-start md:items-center w-full">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3 w-full md:w-auto">
                  <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>
                    <SelectTrigger className="w-full md:w-48 bangla-text">
                      <SelectValue placeholder="‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all" className="bangla-text">‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</SelectItem>
                      {departments.map((dept) => (
                        <SelectItem key={dept.value} value={dept.value} className="bangla-text">
                          {dept.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>

                  <Select value={selectedSubject} onValueChange={setSelectedSubject}>
                    <SelectTrigger className="w-full md:w-48 bangla-text">
                      <SelectValue placeholder="‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all" className="bangla-text">
                        {selectedDepartment === 'all' ? '‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º' : '‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º'}
                      </SelectItem>
                      {getAvailableSubjects().map((subject) => (
                        <SelectItem key={subject} value={subject} className="bangla-text">
                          {subject}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>

                  <Select value={selectedClass} onValueChange={setSelectedClass}>
                    <SelectTrigger className="w-full md:w-48 bangla-text">
                      <SelectValue placeholder="‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all" className="bangla-text">‡¶∏‡¶¨ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø</SelectItem>
                      {classLevels.map((classLevel) => (
                        <SelectItem key={classLevel} value={classLevel} className="bangla-text">
                          {classLevel} ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="flex gap-2">
                  <Button
                    onClick={startQuizMode}
                    className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white bangla-text"
                    disabled={mcqQuestions.length === 0}
                  >
                    <Clock className="w-4 h-4 mr-2" />
                    ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Æ‡ßã‡¶°
                  </Button>
                  
                  <Button
                    onClick={resetQuiz}
                    variant="outline"
                    className="bangla-text"
                  >
                    <RotateCcw className="w-4 h-4 mr-2" />
                    ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
                  </Button>
                </div>
              </div>

              {/* Stats */}
              <div className="flex flex-wrap gap-4 text-sm">
                <div className="flex items-center gap-2">
                  <Trophy className="w-4 h-4 text-yellow-500" />
                  <span className="bangla-text">‡¶∏‡ßç‡¶ï‡ßã‡¶∞: {score}/{answeredQuestions.size}</span>
                </div>
                {quizMode && (
                  <div className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-red-500" />
                    <span className="bangla-text font-mono">{formatTime(timeLeft)}</span>
                  </div>
                )}
                <div className="flex items-center gap-2">
                  <span className="bangla-text">‡¶Æ‡ßã‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: {mcqQuestions.length}</span>
                </div>
                {selectedDepartment !== 'all' && (
                  <div className="flex items-center gap-2">
                    <span className="text-blue-600 dark:text-blue-400 bangla-text font-medium">
                      {departments.find(d => d.value === selectedDepartment)?.label} ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó
                    </span>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {mcqQuestions.length === 0 ? (
          <Card className="bg-white/90 dark:bg-gray-800/80 backdrop-blur-xl border-white/30 shadow-xl">
            <CardContent className="p-8 text-center">
              <div className="bg-gray-100 dark:bg-gray-800 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4">
                <CheckCircle className="w-10 h-10 text-gray-400" />
              </div>
              <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2 bangla-text">
                ‡¶ï‡ßã‡¶®‡ßã MCQ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø
              </h3>
              <p className="text-gray-600 dark:text-gray-300 mb-4 bangla-text">
                {selectedDepartment === 'all' && selectedSubject === 'all' && selectedClass === 'all'
                  ? '‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶®‡ßã MCQ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§'
                  : `${selectedDepartment !== 'all' ? departments.find(d => d.value === selectedDepartment)?.label + ' ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá‡¶∞' : ''} ${selectedSubject !== 'all' ? selectedSubject : ''} ${selectedClass !== 'all' ? selectedClass + ' ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø‡¶∞' : ''} ‡¶ï‡ßã‡¶®‡ßã MCQ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§`
                }
              </p>
              <div className="flex gap-2 justify-center flex-wrap">
                {selectedDepartment !== 'all' && (
                  <Button
                    onClick={() => setSelectedDepartment('all')}
                    className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white bangla-text"
                  >
                    ‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
                  </Button>
                )}
                {selectedSubject !== 'all' && (
                  <Button
                    onClick={() => setSelectedSubject('all')}
                    className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white bangla-text"
                  >
                    {selectedDepartment === 'all' ? '‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®' : '‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®'}
                  </Button>
                )}
                {selectedClass !== 'all' && (
                  <Button
                    onClick={() => setSelectedClass('all')}
                    variant="outline"
                    className="bangla-text"
                  >
                    ‡¶∏‡¶¨ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        ) : (
          <>
            {/* Question Card */}
            <Card className="bg-white/90 dark:bg-gray-800/80 backdrop-blur-xl border-white/30 shadow-2xl">
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle className="text-lg md:text-xl text-gray-800 dark:text-white bangla-text">
                    ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® {currentQuestionIndex + 1} of {mcqQuestions.length}
                  </CardTitle>
                  {currentQuestion?.subject && (
                    <span className="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-full text-sm bangla-text">
                      {currentQuestion.subject}
                    </span>
                  )}
                </div>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                {currentQuestion ? (
                  <>
                    <div className="mb-6">
                      <h3 className="text-lg md:text-xl font-semibold text-gray-800 dark:text-white mb-4 leading-relaxed bangla-text">
                        {currentQuestion.question}
                      </h3>
                      
                      <div className="space-y-3">
                        {['A', 'B', 'C', 'D'].map((option) => {
                          const optionText = getOptionText(option);
                          const isSelected = selectedAnswer === option;
                          const isCorrect = option === currentQuestion.correct_answer;
                          const showCorrectAnswer = showResult && isCorrect;
                          const showWrongAnswer = showResult && isSelected && !isCorrect;
                          
                          return (
                            <button
                              key={option}
                              onClick={() => !showResult && handleAnswerSelect(option)}
                              disabled={showResult}
                              className={`w-full p-3 md:p-4 text-left rounded-xl border-2 transition-all duration-200 bangla-text ${
                                showCorrectAnswer
                                  ? 'border-green-500 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300'
                                  : showWrongAnswer
                                  ? 'border-red-500 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300'
                                  : isSelected
                                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300'
                                  : 'border-gray-200 dark:border-gray-600 hover:border-blue-300 dark:hover:border-blue-500 bg-white dark:bg-gray-700'
                              }`}
                            >
                              <div className="flex items-center space-x-3">
                                <span className={`w-6 h-6 md:w-8 md:h-8 rounded-full border-2 flex items-center justify-center font-bold text-sm md:text-base ${
                                  showCorrectAnswer
                                    ? 'border-green-500 bg-green-100 dark:bg-green-800 text-green-700 dark:text-green-300'
                                    : showWrongAnswer
                                    ? 'border-red-500 bg-red-100 dark:bg-red-800 text-red-700 dark:text-red-300'
                                    : isSelected
                                    ? 'border-blue-500 bg-blue-100 dark:bg-blue-800 text-blue-700 dark:text-blue-300'
                                    : 'border-gray-400 dark:border-gray-500'
                                }`}>
                                  {option}
                                </span>
                                <span className="flex-1 text-sm md:text-base">
                                  {optionText}
                                </span>
                                {showCorrectAnswer && <CheckCircle className="w-5 h-5 text-green-500" />}
                                {showWrongAnswer && <XCircle className="w-5 h-5 text-red-500" />}
                              </div>
                            </button>
                          );
                        })}
                      </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="flex flex-col md:flex-row gap-3 justify-between">
                      <div className="flex gap-2">
                        <Button
                          onClick={handlePreviousQuestion}
                          disabled={currentQuestionIndex === 0}
                          variant="outline"
                          className="bangla-text"
                        >
                          ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ
                        </Button>
                        
                        {showResult ? (
                          <Button
                            onClick={handleNextQuestion}
                            className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white bangla-text"
                          >
                            {currentQuestionIndex < mcqQuestions.length - 1 ? '‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®' : '‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∂‡ßá‡¶∑'}
                          </Button>
                        ) : (
                          <Button
                            onClick={handleSubmitAnswer}
                            disabled={!selectedAnswer}
                            className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white bangla-text"
                          >
                            ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®
                          </Button>
                        )}
                      </div>

                      <div className="text-sm text-gray-600 dark:text-gray-300 bangla-text">
                        {currentQuestion.board && `${currentQuestion.board} ‡¶¨‡ßã‡¶∞‡ßç‡¶°`}
                        {currentQuestion.year && ` - ${currentQuestion.year}`}
                        {currentQuestion.chapter && ` - ${currentQuestion.chapter}`}
                      </div>
                    </div>
                  </>
                ) : (
                  <div className="text-center py-8">
                    <p className="text-gray-600 dark:text-gray-300 bangla-text">‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </>
        )}
      </div>
    </div>
  );
};

export default MCQSection;
