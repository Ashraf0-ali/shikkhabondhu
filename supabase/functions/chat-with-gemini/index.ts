
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    
    if (!geminiApiKey) {
      console.error('Gemini API key not found in environment variables');
      return new Response(JSON.stringify({ 
        error: 'AI ‡¶∏‡ßá‡¶¨‡¶æ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        details: 'GEMINI_API_KEY not configured'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { message } = await req.json();

    if (!message || typeof message !== 'string') {
      return new Response(JSON.stringify({ 
        error: '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§' 
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    console.log('Fetching context from database...');

    // Fetch comprehensive context from database with NCTB content prioritized
    const [mcqResult, boardResult, nctbResult, notesResult] = await Promise.all([
      supabase.from('mcq_questions').select('*').limit(100),
      supabase.from('board_questions').select('*').limit(30),
      supabase.from('nctb_books').select('*').order('created_at', { ascending: false }),
      supabase.from('notes').select('*').limit(20)
    ]);

    console.log('Database context fetched:', {
      mcq: mcqResult.data?.length || 0,
      board: boardResult.data?.length || 0,
      nctb: nctbResult.data?.length || 0,
      notes: notesResult.data?.length || 0
    });

    // Build enhanced teacher-friendly context with NCTB book content analysis
    let context = `‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï ‡¶è‡¶¨‡¶Ç AI ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶™‡¶°‡¶º‡¶æ‡¶∂‡ßã‡¶®‡¶æ‡¶Ø‡¶º ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶æ‡•§

üéì ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ:
- NCTB ‡¶¨‡¶á ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
- ‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ 
- ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶ó‡¶æ‡¶á‡¶° ‡¶ï‡¶∞‡¶æ
- ‡¶™‡¶æ‡¶†‡ßç‡¶Ø‡¶¨‡¶á ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ

üìö NCTB ‡¶¨‡¶á ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (${nctbResult.data?.length || 0}‡¶ü‡¶ø ‡¶¨‡¶á):`;

    // Add detailed NCTB content for AI analysis
    if (nctbResult.data && nctbResult.data.length > 0) {
      nctbResult.data.forEach(book => {
        context += `\n\nüìñ ${book.title} (${book.class_level} ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ - ${book.subject})`;
        if (book.chapter) context += ` - ‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º: ${book.chapter}`;
        
        // Include significant portions of text content for better analysis
        if (book.content && book.content.length > 0) {
          const contentPreview = book.content.length > 2000 
            ? book.content.substring(0, 2000) + "..."
            : book.content;
          context += `\nüìù ‡¶¨‡¶á ‡¶è‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü: ${contentPreview}`;
        }
        
        if (book.file_url) {
          context += `\nüîó PDF ‡¶≤‡¶ø‡¶Ç‡¶ï: ${book.file_url}`;
        }
      });
    }

    context += `\n\nüéØ MCQ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (${mcqResult.data?.length || 0}‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®):`;
    
    if (mcqResult.data && mcqResult.data.length > 0) {
      // Group MCQs by subject and chapter for pattern analysis
      const subjectGroups: Record<string, any[]> = {};
      mcqResult.data.forEach(mcq => {
        const key = `${mcq.subject}${mcq.chapter ? ` - ${mcq.chapter}` : ''}`;
        if (!subjectGroups[key]) subjectGroups[key] = [];
        subjectGroups[key].push(mcq);
      });

      Object.entries(subjectGroups).forEach(([subject, questions]) => {
        context += `\n\nüìä ${subject} (${questions.length}‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®):`;
        questions.slice(0, 3).forEach(mcq => {
          context += `\n- ${mcq.question?.substring(0, 120)}... [${mcq.board || '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£'} ‡¶¨‡ßã‡¶∞‡ßç‡¶° ${mcq.year || 'N/A'}]`;
        });
      });
    }

    context += `\n\nüìã ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° (${boardResult.data?.length || 0}‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®):`;
    if (boardResult.data && boardResult.data.length > 0) {
      const yearGroups: Record<string, any[]> = {};
      boardResult.data.forEach(q => {
        const key = `${q.year}`;
        if (!yearGroups[key]) yearGroups[key] = [];
        yearGroups[key].push(q);
      });

      Object.entries(yearGroups)
        .sort(([a], [b]) => parseInt(b) - parseInt(a))
        .slice(0, 3)
        .forEach(([year, questions]) => {
          context += `\n\nüóìÔ∏è ${year} ‡¶∏‡¶æ‡¶≤‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® (${questions.length}‡¶ü‡¶ø):`;
          questions.slice(0, 2).forEach(q => {
            context += `\n- ${q.subject} (${q.board} ‡¶¨‡ßã‡¶∞‡ßç‡¶°): ${q.title}`;
          });
        });
    }

    context += `\n\nüìù ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡ßã‡¶ü (${notesResult.data?.length || 0}‡¶ü‡¶ø):`;
    if (notesResult.data && notesResult.data.length > 0) {
      context += `\n${notesResult.data.slice(0, 3).map(note => 
        `- ${note.subject}: ${note.title}`
      ).join('\n')}`;
    }

    context += `\n\nüî• ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡¶∏‡ßÅ‡¶≤‡¶≠ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:
1. üéØ ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶ì ‡¶∏‡¶π‡¶ú ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®
2. üìö NCTB ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®
3. üîç ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßá‡¶â "‡¶ï‡ßã‡¶® ‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ü‡¶∏‡ßá" ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡ßá‡¶∏ ‡¶ï‡¶∞‡ßá:
   - ‡¶∏‡ßá‡¶á ‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡ßá‡¶∞ NCTB ‡¶¨‡¶á ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
   - ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
   - ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ü‡¶™‡¶ø‡¶ï ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
4. üí° MCQ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º:
   - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¨‡¶≤‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
   - NCTB ‡¶¨‡¶á ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡¶ø‡¶®
   - ‡¶ï‡ßá‡¶® ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶æ ‡¶¨‡ßÅ‡¶ù‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶®
5. üß† ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶≠‡ßá‡¶ô‡ßá ‡¶≠‡ßá‡¶ô‡ßá ‡¶∏‡¶π‡¶ú ‡¶ï‡¶∞‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®
6. üéì ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ï‡ßå‡¶∂‡¶≤ ‡¶ì ‡¶ü‡¶ø‡¶™‡¶∏ ‡¶¶‡¶ø‡¶®
7. üìñ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶ï‡ßç‡¶∞‡¶Æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®
8. üåü ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶â‡ßé‡¶∏‡¶æ‡¶π‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
9. üìä ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ì ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
10. ü§ù ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ú‡¶®‡¶ï ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${message}`;

    console.log('Calling Gemini API with enhanced NCTB context...');

    // Call Gemini API with enhanced settings for educational content analysis
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: context
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topP: 0.9,
          maxOutputTokens: 2048,
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      
      let errorMessage = 'AI ‡¶∏‡ßá‡¶¨‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
      
      if (response.status === 401) {
        errorMessage = 'API ‡¶ï‡ßÄ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
      } else if (response.status === 429) {
        errorMessage = '‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
      } else if (response.status >= 500) {
        errorMessage = '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
      }
      
      return new Response(JSON.stringify({ 
        error: errorMessage,
        details: `HTTP ${response.status}` 
      }), {
        status: response.status,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    console.log('Gemini API response received for NCTB analysis');
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      console.error('Invalid Gemini API response structure:', data);
      return new Response(JSON.stringify({ 
        error: 'AI ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        details: 'Invalid API response structure'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const reply = data.candidates[0].content.parts[0].text;

    if (!reply || reply.trim().length === 0) {
      return new Response(JSON.stringify({ 
        error: 'AI ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        details: 'Empty response from AI'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('Successfully generated NCTB-enhanced educational reply');

    return new Response(JSON.stringify({ reply: reply.trim() }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in chat-with-gemini function:', error);
    
    let errorMessage = '‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
    
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      errorMessage = '‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
    } else if (error.message.includes('JSON')) {
      errorMessage = '‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
    }
    
    return new Response(JSON.stringify({ 
      error: errorMessage,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
