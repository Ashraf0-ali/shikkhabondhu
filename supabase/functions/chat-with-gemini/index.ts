
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    
    if (!geminiApiKey) {
      console.error('Gemini API key not found in environment variables');
      return new Response(JSON.stringify({ 
        error: 'AI ‡¶∏‡ßá‡¶¨‡¶æ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        details: 'GEMINI_API_KEY not configured'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { message } = await req.json();

    if (!message || typeof message !== 'string') {
      return new Response(JSON.stringify({ 
        error: '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§' 
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    console.log('Fetching context from database...');

    // Fetch comprehensive context from database
    const [mcqResult, boardResult, nctbResult, notesResult] = await Promise.all([
      supabase.from('mcq_questions').select('*').limit(50),
      supabase.from('board_questions').select('*').limit(20),
      supabase.from('nctb_books').select('*').order('created_at', { ascending: false }).limit(10),
      supabase.from('notes').select('*').limit(15)
    ]);

    console.log('Database context fetched:', {
      mcq: mcqResult.data?.length || 0,
      board: boardResult.data?.length || 0,
      nctb: nctbResult.data?.length || 0,
      notes: notesResult.data?.length || 0
    });

    // Enhanced context with focus on direct answers
    let context = `‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï ‡¶è‡¶¨‡¶Ç AI ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ì ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡•§

üéØ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:
- ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ ‡¶Ø‡¶æ ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡ßá‡¶∏ ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶†‡¶ø‡¶ï ‡¶∏‡ßá‡¶ü‡¶æ‡¶∞‡¶á ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®
- ‡¶Ö‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡¶æ ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶¨‡ßá‡¶® ‡¶®‡¶æ
- MCQ ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø MCQ ‡¶¶‡¶ø‡¶®
- ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶¶‡¶ø‡¶®
- ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶π‡¶ú ‡¶ì ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®

üéì ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶§‡ßç‡¶¨:
- MCQ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ì ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
- ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®
- NCTB ‡¶¨‡¶á ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü
- ‡¶™‡¶æ‡¶†‡ßç‡¶Ø‡¶¨‡¶á ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®

üìö ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶°‡ßá‡¶ü‡¶æ:
- MCQ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${mcqResult.data?.length || 0}‡¶ü‡¶ø
- ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${boardResult.data?.length || 0}‡¶ü‡¶ø  
- NCTB ‡¶¨‡¶á: ${nctbResult.data?.length || 0}‡¶ü‡¶ø
- ‡¶®‡ßã‡¶ü: ${notesResult.data?.length || 0}‡¶ü‡¶ø`;

    // Add MCQ examples if user asks about MCQ
    if (message.toLowerCase().includes('mcq') || message.toLowerCase().includes('‡¶è‡¶Æ‡¶∏‡¶ø‡¶ï‡¶ø‡¶â')) {
      if (mcqResult.data && mcqResult.data.length > 0) {
        context += `\n\nüìä MCQ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:`;
        mcqResult.data.slice(0, 5).forEach((mcq, index) => {
          context += `\n\n${index + 1}. ${mcq.question}`;
          if (mcq.option_a) context += `\na) ${mcq.option_a}`;
          if (mcq.option_b) context += `\nb) ${mcq.option_b}`;
          if (mcq.option_c) context += `\nc) ${mcq.option_c}`;
          if (mcq.option_d) context += `\nd) ${mcq.option_d}`;
          context += `\n‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${mcq.correct_answer}`;
          if (mcq.subject) context += ` [${mcq.subject}]`;
        });
      }
    }

    // Add NCTB content if user asks about books
    if (message.toLowerCase().includes('‡¶¨‡¶á') || message.toLowerCase().includes('nctb') || message.toLowerCase().includes('‡¶™‡¶ø‡¶°‡¶ø‡¶è‡¶´')) {
      if (nctbResult.data && nctbResult.data.length > 0) {
        context += `\n\nüìñ NCTB ‡¶¨‡¶á ‡¶§‡¶•‡ßç‡¶Ø:`;
        nctbResult.data.forEach(book => {
          context += `\n‚Ä¢ ${book.title} (${book.class_level} ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ - ${book.subject})`;
          if (book.file_url) {
            context += `\n  üîó ‡¶≤‡¶ø‡¶Ç‡¶ï: ${book.file_url}`;
          }
        });
      }
    }

    context += `\n\nüìù ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ:
1. ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®
2. ‡¶∏‡¶π‡¶ú ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®  
3. ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡¶®
4. MCQ ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ö‡¶™‡¶∂‡¶® ‡¶∏‡¶π ‡¶¶‡¶ø‡¶®
5. ‡¶Ö‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶¨‡ßá‡¶® ‡¶®‡¶æ
6. ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ö‡¶æ‡¶á‡¶≤‡ßá‡¶á ‡¶¶‡¶ø‡¶®

‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${message}`;

    console.log('Calling Gemini API with focused context...');

    // Call Gemini API
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: context
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          maxOutputTokens: 800,
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      
      let errorMessage = 'AI ‡¶∏‡ßá‡¶¨‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
      
      if (response.status === 401) {
        errorMessage = 'API ‡¶ï‡ßÄ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
      } else if (response.status === 429) {
        errorMessage = '‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
      } else if (response.status >= 500) {
        errorMessage = '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
      }
      
      return new Response(JSON.stringify({ 
        error: errorMessage,
        details: `HTTP ${response.status}` 
      }), {
        status: response.status,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    console.log('Gemini API response received successfully');
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      console.error('Invalid Gemini API response structure:', data);
      return new Response(JSON.stringify({ 
        error: 'AI ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        details: 'Invalid API response structure'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const reply = data.candidates[0].content.parts[0].text;

    if (!reply || reply.trim().length === 0) {
      return new Response(JSON.stringify({ 
        error: 'AI ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        details: 'Empty response from AI'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('Successfully generated focused educational reply');

    return new Response(JSON.stringify({ reply: reply.trim() }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in chat-with-gemini function:', error);
    
    let errorMessage = '‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
    
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      errorMessage = '‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
    } else if (error.message.includes('JSON')) {
      errorMessage = '‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§';
    }
    
    return new Response(JSON.stringify({ 
      error: errorMessage,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
