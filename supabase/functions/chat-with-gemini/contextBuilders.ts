export const buildBaseContext = (chatHistory: any[] = []) => {
  let context = `ржЖржкржирж┐ ржПржХржЬржи ржЕржнрж┐ржЬрзНржЮржд ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ рж╢рж┐ржХрзНрж╖ржХ ржПржмржВ AI рж╕рж╣рж╛ржпрж╝ржХред 

ЁЯОп ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛:
- ржЖржЧрзЗрж░ ржХржерзЛржкржХржержи ржоржирзЗ рж░рж╛ржЦрзБржи ржПржмржВ рж╕рзЗржЗ ржЕржирзБржпрж╛ржпрж╝рзА ржЙрждрзНрждрж░ ржжрж┐ржи
- рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА ржпрж╛ ржЬрж┐ржЬрзНржЮрзЗрж╕ ржХрж░ржмрзЗ, ржарж┐ржХ рж╕рзЗржЯрж╛рж░ржЗ ржЙрждрзНрждрж░ ржжрж┐ржи
- ржпржжрж┐ рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА ржПржХрж╛ржзрж┐ржХ ржкрзНрж░рж╢рзНржи ржЪрж╛ржпрж╝ (ржпрзЗржоржи рзлржЯрж╛ ржкрзНрж░рж╢рзНржи), рждрж╛рж╣рж▓рзЗ ржЕржмрж╢рзНржпржЗ рж╕рзЗржЗ рж╕ржВржЦрзНржпржХ ржкрзНрж░рж╢рзНржи ржжрж┐ржи
- ржмржЗ ржЪрж╛ржЗрж▓рзЗ ржкрзНрж░ржержорзЗ ржжрзЗржЦрзБржи ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛
- ржпржжрж┐ ржмржЗ ржерж╛ржХрзЗ рждрж╛рж╣рж▓рзЗ ржмрж▓рзБржи "рж╣рзНржпрж╛ржБ, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗ" ржПржмржВ рждрж╛рж░ржкрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржжрж┐ржи
- ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ рждрж╛рж╣рж▓рзЗ ржмрж┐ржиржпрж╝рзЗрж░ рж╕рж╛ржерзЗ ржмрж▓рзБржи "ржжрзБржГржЦрж┐ржд, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржПржЗ ржмржЗржЯрж┐ ржирзЗржЗ"
- MCQ ржЪрж╛ржЗрж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ MCQ ржжрж┐ржи - ржЕржмрж╢рзНржпржЗ ржмрж▓рзБржи "рж╣рзНржпрж╛ржБ, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗ" ржпржжрж┐ ржерж╛ржХрзЗ
- ржмрзНржпрж╛ржЦрзНржпрж╛ рж╕рж╣ржЬ ржУ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж░рж╛ржЦрзБржи
- PDF рж▓рж┐ржВржХ ржжрзЗржУржпрж╝рж╛рж░ рж╕ржоржпрж╝ ржПржЗ ржлрж░ржорзНржпрж╛ржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: "ЁЯФЧ PDF рж▓рж┐ржВржХ: [URL]"
- ржмржЗ ржерж╛ржХрж▓рзЗ ржЕржмрж╢рзНржпржЗ PDF рж▓рж┐ржВржХ ржжрж┐ржи`;

  // Add chat history context
  if (chatHistory && chatHistory.length > 0) {
    context += `\n\nЁЯУЬ ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержи:`;
    // Only include recent messages to avoid token limits
    const recentHistory = chatHistory.slice(-10);
    recentHistory.forEach((msg: any, index: number) => {
      const role = msg.role === 'user' ? 'рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА' : 'AI рж╢рж┐ржХрзНрж╖ржХ';
      context += `\n${role}: ${msg.content}`;
    });
    context += `\n\nтЪая╕П ржЙржкрж░рзЗрж░ ржХржерзЛржкржХржержирзЗрж░ ржкрзНрж░рзЗржХрзНрж╖рж┐рждрзЗ ржирж┐ржЪрзЗрж░ ржирждрзБржи ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐ржиред ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержирзЗ ржпржжрж┐ ржХрзЛржирзЛ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржерж╛ржХрзЗ (ржпрзЗржоржи ржХрждржЧрзБрж▓рзЛ ржкрзНрж░рж╢рзНржи ржЪрзЗржпрж╝рзЗржЫрзЗ), рж╕рзЗржЯрж╛ ржоржирзЗ рж░рж╛ржЦржмрзЗржиред`;
  }

  return context;
};

export const buildBookContext = (books: any[], message: string) => {
  let context = `\n\nЁЯУЪ ржЙржкрж▓ржмрзНржз ржмржЗрж╕ржорзВрж╣:`;
  
  books.forEach(book => {
    context += `\nтАв ${book.title} (${book.class_level} рж╢рзНрж░рзЗржгрзА - ${book.subject})`;
    if (book.file_url) {
      context += `\n  ЁЯФЧ PDF рж▓рж┐ржВржХ: ${book.file_url}`;
    }
  });
  
  // Specific search based on class level mentioned in the message
  const classNumbers = message.match(/(\d+)/g);
  if (classNumbers) {
    const matchingBooks = books.filter(book => 
      classNumbers.some(num => book.class_level.toString() === num)
    );
    
    if (matchingBooks.length > 0) {
      context += `\n\nЁЯОп ржЖржкржирж╛рж░ ржЪрж╛рж╣рж┐ржжрж╛ ржорждрзЛ ржмржЗ:`;
      matchingBooks.forEach(book => {
        context += `\nтАв ${book.title} (${book.class_level} рж╢рзНрж░рзЗржгрзА - ${book.subject})`;
        if (book.file_url) {
          context += `\n  ЁЯФЧ PDF рж▓рж┐ржВржХ: ${book.file_url}`;
        }
      });
      
      context += `\n\nЁЯУЦ ржЙржкрж░рзЗрж░ ржпрзЗржХрзЛржирзЛ ржмржЗ ржкржбрж╝рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржЖржорж┐ PDF рж▓рж┐ржВржХ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред`;
    }
  }
  
  context += `\n\nтЪая╕П ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: ржмржЗ ржЪрж╛ржЗрж▓рзЗ ржЕржмрж╢рзНржпржЗ "рж╣рзНржпрж╛ржБ, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗ" ржмрж▓рзЗ рждрж╛рж░ржкрж░ PDF рж▓рж┐ржВржХ ржжрж┐ржмрзЗржиред`;
  
  return context;
};

export const buildMCQContext = (mcqData: any[]) => {
  let context = `\n\nЁЯУК MCQ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙржжрж╛рж╣рж░ржг:`;
  
  // Show sample MCQs - more than before to give better context
  mcqData.slice(0, 10).forEach((mcq, index) => {
    context += `\n\n${index + 1}. ${mcq.question}`;
    if (mcq.option_a) context += `\na) ${mcq.option_a}`;
    if (mcq.option_b) context += `\nb) ${mcq.option_b}`;
    if (mcq.option_c) context += `\nc) ${mcq.option_c}`;
    if (mcq.option_d) context += `\nd) ${mcq.option_d}`;
    context += `\nтЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░: ${mcq.correct_answer}`;
    
    // Add additional info if available
    if (mcq.subject) context += ` [${mcq.subject}`;
    if (mcq.board) context += ` - ${mcq.board}`;
    if (mcq.year) context += ` - ${mcq.year}`;
    if (mcq.subject || mcq.board || mcq.year) context += `]`;
  });
  
  // Add summary of available MCQs
  const subjects = [...new Set(mcqData.map(mcq => mcq.subject).filter(s => s))];
  const boards = [...new Set(mcqData.map(mcq => mcq.board).filter(b => b))];
  const years = [...new Set(mcqData.map(mcq => mcq.year).filter(y => y))];
  
  context += `\n\nЁЯУЛ ржЙржкрж▓ржмрзНржз MCQ рж╕ржорзВрж╣:`;
  if (subjects.length > 0) context += `\nЁЯУЪ ржмрж┐рж╖ржпрж╝: ${subjects.join(', ')}`;
  if (boards.length > 0) context += `\nЁЯПЫя╕П ржмрзЛрж░рзНржб: ${boards.join(', ')}`;
  if (years.length > 0) context += `\nЁЯУЕ рж╕рж╛рж▓: ${years.join(', ')}`;
  
  return context;
};

export const buildFinalInstructions = (message: string, foundBooks: any[] = []) => {
  let context = `\n\nЁЯУЭ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ ржЙрждрзНрждрж░ ржирж┐ржпрж╝ржо:
1. MCQ ржЪрж╛ржЗрж▓рзЗ ржЕржмрж╢рзНржпржЗ ржмрж▓рзБржи "рж╣рзНржпрж╛ржБ, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗред" ржПржмржВ рждрж╛рж░ржкрж░ MCQ ржжрж┐ржи
2. ржпржжрж┐ ржПржХрж╛ржзрж┐ржХ MCQ ржЪрж╛ржпрж╝ (ржпрзЗржоржи рзлржЯрж╛), рждрж╛рж╣рж▓рзЗ ржЕржмрж╢рзНржпржЗ рж╕рзЗржЗ рж╕ржВржЦрзНржпржХ MCQ ржжрж┐ржи
3. ржмржЗ ржЪрж╛ржЗрж▓рзЗ ржЕржмрж╢рзНржпржЗ ржкрзНрж░ржержорзЗ ржмрж▓рзБржи "рж╣рзНржпрж╛ржБ, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗред" рждрж╛рж░ржкрж░ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ PDF рж▓рж┐ржВржХ ржжрж┐ржи
4. PDF рж▓рж┐ржВржХ ржлрж░ржорзНржпрж╛ржЯ: "ЁЯФЧ PDF рж▓рж┐ржВржХ: [URL]" - ржПржЗ ржлрж░ржорзНржпрж╛ржЯ ржЕржмрж╢рзНржпржЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
5. ржмржЗ/MCQ ржирж╛ ржерж╛ржХрж▓рзЗ ржмрж▓рзБржи "ржжрзБржГржЦрж┐ржд, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржПржЯрж┐ ржирзЗржЗ"
6. MCQ ржЪрж╛ржЗрж▓рзЗ ржЕржкрж╢ржи рж╕рж╣ ржжрж┐ржи ржПржмржВ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржжрж┐ржи
7. ржкрзВрж░рзНржмрзЗрж░ ржХржерзЛржкржХржержирзЗрж░ ржнрж┐рждрзНрждрж┐рждрзЗ ржЙрждрзНрждрж░ ржжрж┐ржи
8. ржХржЦржирзЛ рж╢рзБржзрзБ "рж╣рзНржпрж╛ржБ ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗ" ржмрж▓рзЗ ржерзЗржорзЗ ржпрж╛ржмрзЗржи ржирж╛ - ржЕржмрж╢рзНржпржЗ MCQ/PDF рж▓рж┐ржВржХ ржжрж┐ржи

тЪая╕П CRITICAL: ржпржжрж┐ ржХрзЛржирзЛ MCQ/ржмржЗ ржЪрж╛ржпрж╝ ржПржмржВ ржЙржкрж░рзЗ ржжрзЗржЦрж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ, рждрж╛рж╣рж▓рзЗ ржЕржмрж╢рзНржпржЗ рж╕рзЗржЯрж┐ ржжрж┐рждрзЗ рж╣ржмрзЗред ржХржЦржирзЛ рж╢рзБржзрзБ "рж╣рзНржпрж╛ржБ ржЖржЫрзЗ" ржмрж▓рзЗ ржерж╛ржоржмрзЗржи ржирж╛!

рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАрж░ ржирждрзБржи ржкрзНрж░рж╢рзНржи: ${message}`;

  // Specifically for MCQ requests, add the direct instruction
  const mcqRequest = message.toLowerCase().includes('mcq') || 
                    message.toLowerCase().includes('ржПржорж╕рж┐ржХрж┐ржЙ') ||
                    message.toLowerCase().includes('ржкрзНрж░рж╢рзНржи');
                     
  if (mcqRequest) {
    context += `\n\nЁЯЪи ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: ржЙржкрж░рзЗ MCQ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙржжрж╛рж╣рж░ржг ржжрзЗржУржпрж╝рж╛ ржЖржЫрзЗред ржЕржмрж╢рзНржпржЗ ржПржЗ ржзрж░ржирзЗрж░ MCQ ржжрж┐ржи ржПржмржВ "рж╣рзНржпрж╛ржБ, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗ" ржмрж▓рзБржи!`;
    
    // Check if user asked for multiple questions
    const numberMatch = message.match(/(\d+)\s*ржЯрж╛|(\d+)\s*ржЯрж┐/);
    if (numberMatch) {
      const requestedCount = numberMatch[1] || numberMatch[2];
      context += `\n\nЁЯФв ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА ${requestedCount}ржЯрж┐ ржкрзНрж░рж╢рзНржи ржЪрзЗржпрж╝рзЗржЫрзЗред ржЕржмрж╢рзНржпржЗ ${requestedCount}ржЯрж┐ ржкрзНрж░рж╢рзНржи ржжрж┐ржи!`;
    }
  }

  // Specifically for book requests, add the direct instruction  
  const bookRequest = message.toLowerCase().includes('ржмржЗ') || 
                     message.toLowerCase().includes('ржкрж┐ржбрж┐ржПржл') || 
                     message.toLowerCase().includes('pdf') ||
                     message.toLowerCase().includes('nctb') ||
                     message.toLowerCase().includes('рж╢рзНрж░рзЗржгрзА') ||
                     message.toLowerCase().includes('class');
                     
  if (bookRequest && foundBooks.length > 0) {
    context += `\n\nЁЯЪи ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: ржЙржкрж░рзЗ ржмржЗржЧрзБрж▓рзЛ ржУ рждрж╛ржжрзЗрж░ PDF рж▓рж┐ржВржХ ржжрзЗржУржпрж╝рж╛ ржЖржЫрзЗред ржЕржмрж╢рзНржпржЗ ржПржЗ рж▓рж┐ржВржХржЧрзБрж▓рзЛ ржжрж┐ржи!`;
  }
  
  return context;
};
